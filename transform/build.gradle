import groovy.json.JsonSlurper

buildscript {
    repositories { flatDir name: 'libs', dirs: "../libs" }
    dependencies { classpath 'com.hoddmimes.versionplugin:versionplugin:1.0' }
}

plugins {
    id 'java'
}


// Set version from version.json file
def jsonSlurper = new JsonSlurper()
def bld = jsonSlurper.parse(new File("$project.rootDir/version.json"))
version = "$bld.major" + "." + "$bld.minor"

apply plugin: 'com.hoddmimes.versionplugin'


VersionTask {
    versionFile = "$project.rootDir/version.json"
}

tasks.register('bumpMinorVersion', com.hoddmimes.versionplugin.VersionTask) {
    action = "minor"
}

tasks.register('bumpMajorVersion', com.hoddmimes.versionplugin.VersionTask) {
    action = "major"
}


repositories {
    mavenCentral()
}


task buildPyMsgJar (type: Jar) {
    archiveBaseName = 'pymessage'
    destinationDirectory = file("../libs/")
    archiveVersion = "$version"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } with jar



    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"

    duplicatesStrategy = 'exclude'


    from('build/classes/java/main/') {
        include '**/*.class'
    }

    manifest {
        attributes 'Implementation-Title': 'PyMessage'
        attributes 'Implementation-Version': archiveVersion
        attributes 'Created-by': 'PoBe @ Hoddmimes'
        attributes 'Main-Class': 'PyTransform'

    }


    doLast {
        def pymsgJar ="pymessage-" + "$version" + ".jar"
        print("***** Built JAR $pymsgJar\n")
    }
}


task deletePyMsgJar( type: Delete ) {
    def generateJar = "../libs/pymessage-" + "$version" + ".jar"
    delete "$generateJar"


    doLast {
        print("***** Delete $generateJar")
    }

}

classes.finalizedBy( buildPyMsgJar )
buildPyMsgJar.dependsOn(deletePyMsgJar)
clean.dependsOn(deletePyMsgJar)

dependencies {
    implementation group: 'net.sf.saxon', name: 'Saxon-HE', version: '12.0'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}


test {
    useJUnitPlatform()
}